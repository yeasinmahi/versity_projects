#include <stdio.h>
#include <iostream>
#include <GL/glut.h>
#include <math.h>

float traRainX = 0;
float traRainY = 1000;
float cloud_X = 0;
float cloud_Y = 0;
float cloud_X2 = 0;
float cloud_Y2 = 0;
int cloudStatus = 1;
int rainStatus = 0;
int boatStatus = 1;
int sunStatus = 1;
float boatX = 0;
float boatY = 0;
float sunX = 0;
float sunY = 0;

//int x=250,y=20;
void drawBoat(int);
void drawRain(int);
void rain();
void tree();
void scene();
void drawSun();
void cloud(int);
void cloud2(int i);
float move, angle;

void DrawCircle(float cx, float cy, float r, int num_segments)
{
	glBegin(GL_TRIANGLE_FAN);
	for (int ii = 0; ii < num_segments; ii++)
	{
		float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);//get the current angle 

		float x = r * cosf(theta);//calculate the x component 
		float y = r * sinf(theta);//calculate the y component 

		glVertex2f(x + cx, y + cy);//output vertex 

	}
	glEnd();
}

void tree()
{
	glPushMatrix();

	glBegin(GL_POLYGON); //Tree 
	glColor3f(1.2, 0.5, 0.4);
	glVertex2i(338, 385);
	glVertex2i(340, 440);
	glVertex2i(338, 510);
	glVertex2i(358, 510);
	glVertex2i(358, 385);
	glVertex2i(362, 380);
	glEnd();

	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(328, 505, 20, 1000); // 4
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(348, 505, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(368, 505, 20, 1000);
	glColor3f(0.0, 0.8, 0.1); // 3
	DrawCircle(318, 525, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(338, 525, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(358, 525, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(378, 525, 20, 1000);
	glColor3f(0.0, 0.8, 0.1); // 2
	DrawCircle(328, 545, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(348, 545, 20, 1000);
	glColor3f(0.0, 0.8, 0.1);
	DrawCircle(368, 545, 20, 1000);
	glColor3f(0.0, 0.8, 0.1); // 1
	DrawCircle(348, 560, 20, 1000);

	glPopMatrix();

}
void scene()
{
	glPushMatrix();

	glBegin(GL_POLYGON); //Sky  
	glColor3f(0.4, 0.5, 1.0);
	glVertex2i(0, 800);
	glVertex2i(1200, 800);
	glColor3f(0.7, 0.7, 1.0);
	glVertex2i(1200, 0);
	glVertex2i(0, 0);
	glEnd();

	glBegin(GL_POLYGON); //Middle ground 
	glColor3f(0.0, 0.5, 0.0);
	glVertex2i(0, 200);
	glVertex2i(200, 350);
	glVertex2i(400, 400);
	glVertex2i(600, 350);
	glVertex2i(800, 320);
	glVertex2i(1000, 300);
	glColor3f(0.1, 0.9, 0.1);
	glVertex2i(1200, 200);
	glVertex2i(1200, 100);
	glVertex2i(0, 100);
	glEnd();


	glBegin(GL_POLYGON); // River
	glColor3f(0.4, 0.4, 1.1);
	glVertex2i(0, 100);
	glVertex2i(200, 120);
	glVertex2i(400, 140);
	glVertex2i(600, 150);
	glColor3f(0.2, 0.3, 1.1);
	glVertex2i(800, 140);
	glVertex2i(1000, 120);
	glVertex2i(1200, 100);
	glVertex2i(1200, 0);
	glVertex2i(0, 0);
	glEnd();

	tree();

	glBegin(GL_POLYGON); //House 
	glColor3f(0.9, 0.7, 0.1);
	glVertex2i(350, 380);
	glVertex2i(350, 460);
	glVertex2i(430, 460);
	glVertex2i(430, 380);
	glEnd();

	glBegin(GL_POLYGON); //Mushroom
	glColor3f(1.0, 0.0, 0.0);
	glVertex2i(910, 315);
	glVertex2i(920, 330);
	glVertex2i(930, 330);
	glVertex2i(940, 315);
	glEnd();

	glBegin(GL_POLYGON); //Mushroom
	glColor3f(0.9, 0.8, 0.0);
	glVertex2i(922, 300);
	glVertex2i(919, 315);
	glVertex2i(931, 315);
	glVertex2i(928, 300);
	glEnd();


	glBegin(GL_POLYGON); //House 
	glColor3f(0.9, 0.0, 0.0);
	glVertex2i(340, 460);
	glVertex2i(390, 500);
	glVertex2i(440, 460);
	glEnd();

	glBegin(GL_POLYGON); //Door
	glColor3f(1.0, 1.0, 0.0);
	glVertex2i(370, 380);
	glVertex2i(370, 430);
	glVertex2i(410, 430);
	glVertex2i(410, 380);
	glEnd();

	glBegin(GL_POLYGON); //Grass
	glColor3f(0.0, 0.8, 0.1);
	glVertex2i(780, 315);
	glVertex2i(770, 330);
	glVertex2i(780, 325);
	glVertex2i(775, 340);
	glVertex2i(785, 330);
	glVertex2i(787, 350);
	glVertex2i(790, 330);
	glVertex2i(800, 340);
	glVertex2i(795, 325);
	glVertex2i(805, 330);
	glVertex2i(795, 315);
	glEnd();

	glBegin(GL_POLYGON); //Grass 2
	glColor3f(0.0, 0.8, 0.1);
	glVertex2i(810, 310);
	glVertex2i(800, 325);
	glVertex2i(810, 320);
	glVertex2i(805, 335);
	glVertex2i(815, 325);
	glVertex2i(817, 345);
	glVertex2i(820, 325);
	glVertex2i(830, 335);
	glVertex2i(825, 320);
	glVertex2i(835, 325);
	glVertex2i(825, 310);
	glEnd();

	glBegin(GL_POLYGON); //Grass 3
	glColor3f(0.0, 0.8, 0.1);
	glVertex2i(440, 375);
	glVertex2i(430, 390);
	glVertex2i(440, 385);
	glVertex2i(435, 400);
	glVertex2i(445, 390);
	glVertex2i(447, 410);
	glVertex2i(450, 390);
	glVertex2i(460, 400);
	glVertex2i(455, 385);
	glVertex2i(465, 390);
	glVertex2i(455, 375);
	glEnd();

	glBegin(GL_POLYGON); //Grass 5 Big
	glColor3f(0.0, 0.5, 0.1);
	glVertex2i(1085, 105);
	glVertex2i(1070, 125);
	glVertex2i(1060, 135);
	glVertex2i(1080, 125);
	//glColor3f (0.8, 0.8, 0.1);
	glVertex2i(1070, 155);
	glVertex2i(1090, 135);
	glVertex2i(1095, 175);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(1100, 135);
	glVertex2i(1120, 155);
	glVertex2i(1110, 125);
	glVertex2i(1130, 135);
	glVertex2i(1120, 125);
	glVertex2i(1105, 105);
	glEnd();


	glBegin(GL_POLYGON); //Grass 4 Big
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(1135, 100);
	glVertex2i(1120, 120);
	glVertex2i(1110, 130);
	glVertex2i(1130, 120);
	//glColor3f (0.8, 0.8, 0.1);
	glVertex2i(1120, 150);
	glVertex2i(1140, 130);
	glVertex2i(1145, 170);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(1150, 130);
	glVertex2i(1170, 150);
	glVertex2i(1160, 120);
	glVertex2i(1180, 130);
	glVertex2i(1170, 120);
	glVertex2i(1155, 100);
	glEnd();

	glBegin(GL_POLYGON); //Grass 6 Big
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(35, 100);
	glVertex2i(20, 120);
	glVertex2i(10, 130);
	glVertex2i(30, 120);
	glVertex2i(20, 150);
	glVertex2i(40, 130);
	glVertex2i(45, 170);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(50, 130);
	glVertex2i(70, 150);
	glVertex2i(60, 120);
	glVertex2i(80, 130);
	glVertex2i(70, 120);
	glVertex2i(55, 100);
	glEnd();

	glBegin(GL_POLYGON); //Grass 7 Big
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(95, 110);
	glVertex2i(80, 130);
	glVertex2i(70, 140);
	glVertex2i(90, 130);
	glVertex2i(80, 160);
	glVertex2i(100, 130);
	glColor3f(0.8, 0.7, 0.1);
	glVertex2i(105, 180);
	glVertex2i(110, 140);
	glVertex2i(130, 160);
	glVertex2i(120, 130);
	glVertex2i(140, 140);
	glVertex2i(130, 130);
	glVertex2i(115, 110);
	glEnd();

	glPopMatrix();

}

void drawSun()
{
	glPushMatrix();

	glColor3f(3.0, 1.0, 0.5);
	DrawCircle(900, 700, 40, 1000);// SUN: here the value 900 is the x-axis and 700 is the y-axis and 40 is the radius

	glPopMatrix();
}

void drawCloud()
{
	glPushMatrix();

	glColor3f(0.8, 0.8, 0.8);
	DrawCircle(200, 690, 25, 1000); // 1st cloud
	DrawCircle(230, 700, 25, 1000);
	DrawCircle(180, 700, 25, 1000);
	DrawCircle(210, 720, 25, 1000);

	DrawCircle(600, 590, 25, 1000); // 2nd
	DrawCircle(630, 600, 25, 1000);
	DrawCircle(580, 600, 25, 1000);
	DrawCircle(610, 620, 25, 1000);

	glPopMatrix();
}

void drawBoat(int i)
{
	glPushMatrix();

	glBegin(GL_POLYGON); // Boat Starts
	glColor3f(0.9, 0.8, 0.1);
	glVertex2i(270, 155);
	glVertex2i(375, 165);
	glVertex2i(480, 155);
	glColor3f(1.9, 0.9, 0.1);
	glVertex2i(480, 20);
	glVertex2i(270, 20);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.9, 0.1, 0.1);
	glVertex2i(250, 20);
	glVertex2i(180, 100);
	glVertex2i(380, 80);
	glColor3f(0.8, 0.3, 0.1);
	glVertex2i(600, 100);
	glVertex2i(500, 20);
	glEnd();

	glPopMatrix();
}

void drawRain(int j)
{
	glPushMatrix();

	int x = 0, y = 0;
	glColor3f(0.9, 0.9, 0.9);
	for (int i = 0; i<40; i++)
	{
		for (int j = 0; j<40; j++)
		{
			glBegin(GL_LINES);
			glVertex2i(x, y);
			y += 15;
			glVertex2i(x + 3, y);
			y += 15;
			glEnd();
		}
		y = 0;
		x += 30;
	}

	glPopMatrix();
}

void myInit(void)
{
	glClearColor(0.0, 0.0, 1.0, 0.0);
	glColor3f(1.0f, 1.0f, 1.0f);
	glPointSize(0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 1200.0, 0.0, 800.0);
}

void keyboard(unsigned char key, int x, int y)
{

	switch (key) {
	case 'r':		// to start Rain
	case 'R': 
		rainStatus = 1;
		break;
	case 's':		// to stop Rain
	case 'S':
		rainStatus = 2;
		break;
	case 'b':		//boat start
	case 'B':
		boatStatus = 1;
		break;
	case 'n':		//boat stop
	case 'N':
		boatStatus = 0;
		break;
	case 'c':		//cloud start
	case 'C':
		cloudStatus = 1;
		break;
	case 'v':		//cloud stop
	case 'V':
		cloudStatus = 0;
		break;
	default:
		break;
	}
}
void sun()
{
	if (rainStatus == 1)
	{
		if (sunX<400)
		{
			sunX += 0.4;
		}
		
	}
	

	if (rainStatus == 2)
	{
		if (sunX<0)
		{
			sunX += .4;
		}
		if (sunX>390)
		{
			sunX = -1000;
		}
	}

	glPushMatrix();
	glTranslatef(sunX, sunY, 0);
	drawSun();
	glPopMatrix();
}
void boat()
{
	if (boatStatus == 1)
	{
		boatX += .5;
	}
	if (boatX>1000)
	{
		boatX = -600;
	}
	glPushMatrix();
	glTranslatef(boatX, boatY, 0);
	drawBoat(0);
	glPopMatrix();
}
void rain()
{
	if (rainStatus == 1)
	{
		traRainY -= 1;

		if (traRainY<-400)
		{
			traRainY = 0;
		}
	}
	
	if (rainStatus == 2)
	{
		traRainY -= 1;

		if (traRainY ==999)
		{
			traRainY = -1250;
		}
		if (traRainY<-1250)
		{
			traRainY = -1250;
		}
	}
	glPushMatrix();
	glTranslatef(traRainX, traRainY, 0);
	drawRain(0);
	glPopMatrix();
}
void cloud(int i)
{
	if (cloudStatus == 1)
	{
		cloud_X += 0.2;
	}
	if (cloud_X>1100)
	{
		cloud_X = -650;
	}
	
	
	glPushMatrix();
	glTranslatef(cloud_X, cloud_Y, 0.0);
	drawCloud();

	glPopMatrix();
}

void cloud2(int i)
{
	if (cloudStatus == 1)
	{
		cloud_X2 += 0.3;
	}
	if (cloud_X2>600)
	{
		cloud_X2 = -1150;
	}
	glPushMatrix();
	glTranslatef(cloud_X2 + 500, cloud_Y2 + 50, 0.0);
	drawCloud();
	glPopMatrix();
}
void myDisplay(void)
{
	scene();
	sun();

	boat();
	cloud(1);
	cloud2(1);
	rain();

	glFlush();

	glutPostRedisplay();
	glutSwapBuffers();
}

void main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1350, 700);
	glutInitWindowPosition(0, 0);

	glutCreateWindow("Season");
	glutKeyboardFunc(keyboard);
	glutDisplayFunc(myDisplay);
	myInit();
	glutMainLoop();
}